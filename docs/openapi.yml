openapi: 3.0.1
info:
  title: Chotuve Media Server
  description: 'Api para manejar recursos desde el media server'
  version: 1.0.0
externalDocs:
  description: Enunciado
  url: https://taller-de-programacion-2.github.io/2020-04-16-trabajo-practico/
servers:
- url: https://media-server-staging-fiuba.herokuapp.com/
tags:
- name: resource
  description: Upload and get Resource

paths:
  /resource/{resourceId}:
    get:
      parameters:
      - name: resourceId
        in: path
        description: ID of Resource to return
        required: true
        schema:
          type: string
      tags:
      - resource
      summary: Get an existing resource
      operationId: getResource
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Resource not found
          content: {}
        405:
          description: Validation exception
          content: {}
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceSaved'
          
      security:
      - api_key:
        - write:pets
        - read:pets
        
  /resource/{resourceId}/comment:
    get:
      parameters:
      - name: resourceId
        in: path
        description: ID of Resource to return comments
        required: true
        schema:
          type: string
      tags:
      - comments
      summary: Get comments of an existing resource
      operationId: getComments
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Comments not found
          content: {}
        405:
          description: Validation exception
          content: {}
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentResponse'
    post:
      parameters:
      - name: resourceId
        in: path
        description: ID of Resource to return comments
        required: true
        schema:
          type: string
      tags:
      - comments
      summary: Add a new comment to the server
      operationId: addComment
      requestBody:
        description: Comment object that needs to be added to the server
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        400:
          description: Invalid input
          content: {}
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
      security:
      - api_key:
        - write:pets
        - read:pets
  /resource/{resourceId}/reaction:
    get:
      parameters:
      - name: resourceId
        in: path
        description: ID of Resource to return comments
        required: true
        schema:
          type: string
      tags:
      - reactions
      summary: Get reactions of an existing resource
      operationId: getReactions
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Comments not found
          content: {}
        405:
          description: Validation exception
          content: {}
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReactionResponse'
    post:
      parameters:
      - name: resourceId
        in: path
        description: ID of Resource to return comments
        required: true
        schema:
          type: string
      tags:
      - reactions
      summary: Add a new comment to the server
      operationId: addReaction
      requestBody:
        description: Comment object that needs to be added to the server
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reaction'
        required: true
      responses:
        400:
          description: Invalid input
          content: {}
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionResponse'
      security:
      - api_key:
        - write:pets
        - read:pets
    

  /resource:
    post:
      tags:
      - resource
      summary: Add a new resource to the server
      operationId: addResource
      requestBody:
        description: Resource object that needs to be added to the server
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        required: true
      responses:
        400:
          description: Invalid input
          content: {}
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceResponse'
      security:
      - api_key:
        - write:pets
        - read:pets
  /resource/user/{userId}:
    get:
      parameters:
      - name: userId
        in: path
        description: ID of Resource to return
        required: true
        schema:
          type: string
      tags:
      - resource
      summary: Get resources by user Id
      operationId: getResourceByUser
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
        405:
          description: Validation exception
          content: {}
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceSaved'
          
      security:
      - api_key:
        - write:pets
        - read:pets
components:
  schemas:
    Metadata:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: Mi video
        description:
          type: string
          example: Mi video video description
        location:
          type: string
          example: Argentina
        publication_timestamp:
          type: string
          format: date-time
        visibility:
          type: string
          example: public
    Resource:
      required:
      - metadata
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          type: string
          example: video.mp4
        size:
          type: integer
          example: 300423
        created_at:
          type: string
          format: date-time
        owner:
          type: string
          example: JfdjE734dj
        file:
          type: string
          format: binary
    Comment:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          example: edgar no
    CommentResponse:
      type: object
      properties:
        id:
          type: integer
          format: string
        message:
          type: string
          example: edgar no
    Reaction:
      required:
      - status
      type: object
      properties:
        message:
          type: string
          example: Me gusta
    ReactionResponse:
      type: object
      properties:
        id:
          type: integer
          format: string
        message:
          type: string
          example: Me gusta          
          
    ResourceSaved:
      required:
      - metadata
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          type: string
          example: video.mp4
        size:
          type: integer
          example: 300423
        created_at:
          type: string
          format: date-time
        owner:
          type: string
          example: JfdjE734dj
        file:
          type: string
          example: "www.server.com/media/video.mp4"
    ResourceResponse:
      type: object
      properties:
        id:
          type: string
          example: jsg934fd
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header